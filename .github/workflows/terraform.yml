name: "Terraform Workflows"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      aws-assume-role-arn:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      aws-statefile-s3-bucket:
        required: true
        type: string
      aws-lock-dynamodb-table:
        required: true
        type: string
      bucket_name:
        required: true
        type: string

jobs:
  code_quality:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier
        run: npm run prettier

      - name: Run tests
        run: CI=true npm run test

  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    needs: code_quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-assume-role-arn }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ inputs.aws-region }}

      - name: Terraform init
        run: |
          cd infra && terraform init \
            -backend-config="bucket=${{ inputs.aws-statefile-s3-bucket }}" \
            -backend-config="key=${{ github.event.repository.name }}" \
            -backend-config="region=${{ inputs.aws-region }}" \
            -backend-config="dynamodb_table=${{ inputs.aws-lock-dynamodb-table }}"

      - name: Terraform validate
        run: cd infra && terraform validate

      - name: Terraform plan
        id: terraform-plan
        run: |
          cd infra &&
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform plan -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -out="${{ inputs.environment }}.plan"

      - name: Terraform apply
        id: terraform-apply
        run: |
          cd infra &&
          terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
          terraform apply "${{ inputs.environment }}.plan"

      # - name: Install dependencies
      #   run: npm install

      # - name: Build project
      #   run: npm run build

      # - name: Upload application to S3
      #   run: aws s3 cp build s3://${{ inputs.bucket_name }} --recursive --acl public-read
