{"version":3,"sources":["Octet.js","Netmask.js","SubnetNumbersInput.js","lib/ipv4.js","IPv4Addr.js","App.js","reportWebVitals.js","index.js"],"names":["Octet","props","useState","message","setMessage","value","isValid","setIsValid","classes","className","type","onChange","e","change","target","setValid","isNaN","changeFunction","index","Netmask","SubnetNumbersInput","maxNumberOfSubnets","IPv4","address","mask","this","parseInt","fullAddress","reserved","octet","map","toString","padStart","join","getBinnary","replace","networkAddress","getFullAddress","match","netmask","firstAddress","intFirstAddress","broadcastAddress","count","number","strNumber","len","length","substring","numberOfPossibleSubnets","subnets","getClosestPowerOfTwo","additionalMask","repeat","newNetmask","maxNetmask","currentSubnet","currentOctets","currIpv4","push","getOnlyBinnary","IPv4Addr","ipv4","setIpv4","validAddress","setValidAddress","showSubnetting","setShowSubnetting","subnetsNumber","setSubnetsNumber","setOctet","updatedAddress","firstUsableAddress","lastUsableAddress","availableCount","name","checked","id","netmasks","netmasksElements","forEach","displayNetmasks","breakIntoSubnets","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.077b5183.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Octet.css\";\n\nconst Octet = (props) => {\n  const [message, setMessage] = useState(\"\");\n  const [isValid, setIsValid] = useState(props.value < 255);\n\n  const validClass = isValid ? \"valid\" : \"invalid\";\n  const classes = `octet ${validClass}`;\n\n  return (\n    <div className={classes}>\n      <input\n        type=\"text\"\n        value={props.value}\n        onChange={(e) => {\n          let change = false;\n          if (e.target.value < 0 || e.target.value > 255) {\n            change = true;\n            setIsValid(false);\n            props.setValid(false);\n            setMessage(\"incorrect value\");\n          } else if (e.target.value === \"\" || isNaN(e.target.value)) {\n            change = false;\n            //stay the same\n          } else {\n            change = true;\n            setIsValid(true);\n            props.setValid(true);\n          }\n          props.changeFunction(e.target.value, props.index, change);\n        }}\n      />\n      <div className=\"error-message\">{message}</div>\n    </div>\n  );\n};\n\nexport default Octet;\n","import React, { useState } from \"react\";\nimport \"./Netmask.css\";\n\nconst Netmask = (props) => {\n  const [message, setMessage] = useState(\"\");\n  const [isValid, setIsValid] = useState(true);\n\n  const validClass = isValid ? \"valid\" : \"invalid\";\n  const classes = `netmask ${validClass}`;\n\n  return (\n    <div className={classes}>\n      <input\n        type=\"text\"\n        value={props.value}\n        onChange={(e) => {\n          let change = false;\n          if (e.target.value < 0 || e.target.value > 32) {\n            change = true;\n            setIsValid(false);\n            props.setValid(false);\n            setMessage(\"incorrect value\");\n          } else if (e.target.value === \"\" || isNaN(e.target.value)) {\n            change = false;\n            //stay the same\n          } else {\n            change = true;\n            setIsValid(true);\n            props.setValid(true);\n          }\n          props.changeFunction(e.target.value, change);\n        }}\n      />\n      <div className=\"error-message\">{message}</div>\n    </div>\n  );\n};\n\nexport default Netmask;\n","import React, { useState } from \"react\";\nimport \"./SubnetNumbersInput.css\";\n\nconst SubnetNumbersInput = (props) => {\n  const [message, setMessage] = useState(\"\");\n  const [isValid, setIsValid] = useState(\n    props.value < props.maxNumberOfSubnets\n  );\n\n  const validClass = isValid ? \"valid\" : \"invalid\";\n  const classes = `subnet-numbers ${validClass}`;\n\n  return (\n    <div className={classes}>\n      Number of subnets:\n      <input\n        type=\"text\"\n        value={props.value}\n        onChange={(e) => {\n          let change = false;\n          if (e.target.value < 0 || e.target.value > props.maxNumberOfSubnets) {\n            change = true;\n            setIsValid(false);\n            setMessage(\"incorrect number of subnets\");\n          } else if (e.target.value === \"\") {\n            change = true;\n          } else if (isNaN(e.target.value)) {\n            change = false;\n            //stay the same\n          } else {\n            change = true;\n            setIsValid(true);\n          }\n          props.onChange(e.target.value, change);\n        }}\n      />\n      <div className=\"error-message\">{message}</div>\n    </div>\n  );\n};\n\nexport default SubnetNumbersInput;\n","class IPv4 {\n  constructor(address, mask) {\n    this.address = address;\n    this.mask = parseInt(mask);\n    this.fullAddress = \"\";\n    this.reserved = 2;\n  }\n\n  setReserved(reserved) {\n    this.reserved = reserved;\n  }\n\n  setSubnetMask(mask) {\n    this.mask = mask;\n    this.fullAddress = \"\";\n  }\n\n  setOctet(octet, index) {\n    this.address[index] = octet;\n    this.fullAddress = \"\";\n  }\n\n  getBinnary() {\n    return this.address\n      .map((octet, index) => {\n        return octet.toString(2).padStart(8, \"0\");\n      })\n      .join(\".\");\n  }\n\n  getOnlyBinnary() {\n    return this.address\n      .map((octet, index) => {\n        return octet.toString(2).padStart(8, \"0\");\n      })\n      .join(\"\");\n  }\n\n  getFullAddress() {\n    if (this.fullAddress !== \"\") {\n      return this.fullAddress;\n    }\n    this.fullAddress = parseInt(\n      this.getBinnary().replace(/\\./g, \"\").padStart(32, \"0\"),\n      2\n    );\n    return this.fullAddress;\n  }\n\n  networkAddress() {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      ((1 << (32 - this.mask)) >>> 0).toString(2).padStart(32, \"1\"),\n      2\n    );\n    const networkAddress = ((fullAddress & netmask) >>> 0)\n      .toString(2)\n      .padStart(32, \"0\")\n      .match(/.{1,8}/g);\n\n    const intNetWorkAddress = networkAddress.map((octet) => {\n      return parseInt(octet, 2);\n    });\n    return intNetWorkAddress.join(\".\");\n  }\n\n  firstUsableAddress(reserved = 0) {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      ((1 << (32 - this.mask)) >>> 0).toString(2).padStart(32, \"1\"),\n      2\n    );\n    const firstAddress = (((fullAddress & netmask) + 1 + reserved) >>> 0)\n      .toString(2)\n      .padStart(32, \"0\")\n      .match(/.{1,8}/g);\n\n    const intFirstAddress = firstAddress.map((octet) => {\n      return parseInt(octet, 2);\n    });\n    return intFirstAddress.join(\".\");\n  }\n\n  lastUsableAddress() {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, \"1\"),\n      2\n    );\n    const broadcast = ~(netmask >>> 0);\n    const lastAddress = (((fullAddress | broadcast) >>> 0) - 1)\n      .toString(2)\n      .padStart(32, \"0\")\n      .match(/.{1,8}/g);\n\n    const intLastAddress = lastAddress.map((octet) => {\n      return parseInt(octet, 2);\n    });\n    return intLastAddress.join(\".\");\n  }\n\n  broadcastAddress() {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, \"1\"),\n      2\n    );\n    const broadcast = ~(netmask >>> 0);\n    const broadcastAddress = ((fullAddress | broadcast) >>> 0)\n      .toString(2)\n      .padStart(32, \"0\")\n      .match(/.{1,8}/g);\n\n    const intBroadcastAddress = broadcastAddress.map((octet) => {\n      return parseInt(octet, 2);\n    });\n    return intBroadcastAddress.join(\".\");\n  }\n\n  netmask() {\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, \"1\"),\n      2\n    );\n    const netmaskOctets = netmask\n      .toString(2)\n      .padStart(32, \"0\")\n      .match(/.{1,8}/g);\n\n    const intNetmask = netmaskOctets.map((octet) => {\n      return parseInt(octet, 2);\n    });\n    return intNetmask.join(\".\");\n  }\n\n  count() {\n    const count = parseInt((1 << (32 - this.mask)).toString(2), 2);\n    return count;\n  }\n\n  availableCount(reserved = this.reserved) {\n    return this.count() - reserved;\n  }\n\n  getClosestPowerOfTwo(number) {\n    let strNumber = (+number).toString(2);\n    let len = strNumber.length;\n    let masking = parseInt(strNumber.substring(1), 2) >>> 0;\n    if (masking > 0) {\n      return (1 << len) >>> 0;\n    }\n    return number;\n  }\n\n  breakIntoSubnets(number) {\n    if (this.numberOfPossibleSubnets < number || number <= 0) {\n      return [`Can't break into ${number} subnets`];\n    }\n    let subnets = [];\n    let closestNumber = +this.getClosestPowerOfTwo(number); //e.g. 8 - 1000\n    let len = (+closestNumber).toString(2).length - 1; // to get the max number of elements for the next power of two.\n    let additionalMask =\n      (parseInt(\"1\".repeat(len), 2) << (32 - this.mask - len)) >>> 0; // e.g. 111 if we have number be 8\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, \"1\"),\n      2\n    ); // the current netmask in binary\n    const newNetmask = this.mask + len;\n    let maxNetmask = (netmask | additionalMask) >>> 0;\n    let currentSubnet = netmask;\n    let currentOctets = this.address;\n    while (currentSubnet <= maxNetmask) {\n      let currIpv4 = new IPv4(currentOctets, newNetmask);\n      subnets.push({\n        networkAddress: currIpv4.networkAddress(),\n        netmask: newNetmask,\n        count: currIpv4.count(),\n      });\n      currentSubnet += currIpv4.count();\n      const nextSubnet =\n        parseInt(currIpv4.getOnlyBinnary(), 2) + currIpv4.count();\n      const strCurrentOctets = nextSubnet\n        .toString(2)\n        .padStart(32, \"0\")\n        .match(/.{1,8}/g);\n      currentOctets = strCurrentOctets.map((octet) => {\n        return parseInt(octet, 2);\n      });\n    }\n    return subnets;\n  }\n\n  numberOfPossibleSubnets() {\n    return 2 ** (30 - this.mask);\n  }\n}\n\nexport { IPv4 };\n","import Octet from \"./Octet\";\nimport Netmask from \"./Netmask\";\nimport SubnetNumbersInput from \"./SubnetNumbersInput\";\nimport React, { useState } from \"react\";\nimport { IPv4 } from \"./lib/ipv4\";\nimport \"./IPv4Addr.css\";\n\nconst IPv4Addr = (props) => {\n  const [ipv4, setIpv4] = useState(new IPv4([10, 0, 8, 0], 21));\n  const [validAddress, setValidAddress] = useState(true);\n  const [showSubnetting, setShowSubnetting] = useState(true);\n  const [subnetsNumber, setSubnetsNumber] = useState(0);\n\n  const setOctet = (octet, index, change) => {\n    let updatedAddress = [...ipv4.address];\n    if (change) {\n      updatedAddress[index] = +octet;\n      setIpv4(new IPv4(updatedAddress, ipv4.mask));\n    }\n  };\n\n  const setNetmask = (netmask, change) => {\n    if (change) {\n      setIpv4(new IPv4(ipv4.address, netmask));\n    }\n  };\n\n  const setNumberOfSubnets = (subnetsNumber, change) => {\n    if (change) {\n      setSubnetsNumber(subnetsNumber);\n    }\n  };\n\n  const displayNetmasks = (netmasks) => {\n    let netmasksElements = [];\n    netmasks.forEach((e, index) => {\n      netmasksElements.push(\n        <div key={`networkAddress-${index}`}>\n          {e.networkAddress}/{e.netmask} ({e.count} hosts)\n        </div>\n      );\n    });\n    return netmasksElements;\n  };\n\n  return (\n    <div>\n      <div className=\"address-container\">\n        {ipv4.address.map((octet, index) => {\n          return (\n            <div className=\"octet-container\" key={`oct-container-${index}`}>\n              <Octet\n                value={octet}\n                index={index}\n                setValid={setValidAddress}\n                changeFunction={setOctet}\n              />\n              {index < 3 ? <span>.</span> : <span className=\"slash\">/</span>}\n            </div>\n          );\n        })}{\" \"}\n        <Netmask\n          value={ipv4.mask}\n          setValid={setValidAddress}\n          changeFunction={setNetmask}\n        />\n      </div>\n\n      {validAddress ? (\n        <div className=\"results\">\n          <div>\n            <strong>Binary:</strong>\n            <span>{ipv4.getBinnary()}</span>\n          </div>\n          <div>\n            <strong>Network Address:</strong>\n            <span>{ipv4.networkAddress()}</span>\n          </div>\n          <div>\n            <strong>First usable address:</strong>\n            <span>{ipv4.firstUsableAddress()}</span>\n          </div>\n          <div>\n            <strong>First usable address(AWS):</strong>\n            <span>{ipv4.firstUsableAddress(3)}</span>\n            <br />\n            <span>\n              AWS reserves first four addresses for: Network, Router, DNS,\n              Future use\n            </span>\n          </div>\n          <div>\n            <strong>Last usable address:</strong>\n            <span>{ipv4.lastUsableAddress()}</span>\n          </div>\n          <div>\n            <strong>Broadcast Address:</strong>\n            <span>{ipv4.broadcastAddress()}</span>\n          </div>\n          <div>\n            <strong>Netmask:</strong>\n            <span>{ipv4.netmask()}</span>\n          </div>\n          <div>\n            <strong>Count:</strong>\n            <span>{ipv4.count()}</span>\n          </div>\n          <div>\n            <strong>Usable addresses:</strong>\n            <span>{ipv4.availableCount()}</span>\n          </div>\n          <div>\n            <strong>Usable addresses(AWS):</strong>\n            <span>{ipv4.availableCount(5)}</span>\n          </div>\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div className=\"subnets\">\n        Break into subnets:\n        <input\n          name=\"showSubnetting\"\n          type=\"checkbox\"\n          checked={showSubnetting}\n          onChange={(e) => {\n            setShowSubnetting(e.target.checked);\n          }}\n        />\n        <br />\n        <br />\n        {showSubnetting ? (\n          <div id=\"details\">\n            max number of subnets: {ipv4.numberOfPossibleSubnets()} with a\n            minimum of 4 addreses (minus Network, broadcast, 2 available\n            addresses) closest: {ipv4.getClosestPowerOfTwo(subnetsNumber)}\n            <div id=\"subnet-input-container\">\n              <SubnetNumbersInput\n                value={subnetsNumber}\n                onChange={setNumberOfSubnets}\n                maxNumberOfSubnets={ipv4.numberOfPossibleSubnets()}\n              />\n              {displayNetmasks(ipv4.breakIntoSubnets(subnetsNumber))}\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default IPv4Addr;\n","import IPv4Addr from \"./IPv4Addr\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>CIDR Calculator</div>\n      </header>\n      <IPv4Addr />\n      <footer>\n        <hr />\n        If you find this tool useful, you might enjoy reading my blog:{\" \"}\n        <a href=\"https://rderik.com\">rderik.com</a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}