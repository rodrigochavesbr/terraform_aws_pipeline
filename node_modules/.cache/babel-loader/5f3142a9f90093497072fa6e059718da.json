{"ast":null,"code":"import _classCallCheck from\"/Users/rschaves/terraform_aws_pipeline/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/rschaves/terraform_aws_pipeline/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var IPv4=/*#__PURE__*/function(){function IPv4(address,mask){_classCallCheck(this,IPv4);this.address=address;this.mask=parseInt(mask);this.fullAddress=\"\";this.reserved=2;}_createClass(IPv4,[{key:\"setReserved\",value:function setReserved(reserved){this.reserved=reserved;}},{key:\"setSubnetMask\",value:function setSubnetMask(mask){this.mask=mask;this.fullAddress=\"\";}},{key:\"setOctet\",value:function setOctet(octet,index){this.address[index]=octet;this.fullAddress=\"\";}},{key:\"getBinnary\",value:function getBinnary(){return this.address.map(function(octet,index){return octet.toString(2).padStart(8,\"0\");}).join(\".\");}},{key:\"getOnlyBinnary\",value:function getOnlyBinnary(){return this.address.map(function(octet,index){return octet.toString(2).padStart(8,\"0\");}).join(\"\");}},{key:\"getFullAddress\",value:function getFullAddress(){if(this.fullAddress!==\"\"){return this.fullAddress;}this.fullAddress=parseInt(this.getBinnary().replace(/\\./g,\"\").padStart(32,\"0\"),2);return this.fullAddress;}},{key:\"networkAddress\",value:function networkAddress(){var fullAddress=this.getFullAddress();var netmask=parseInt((1<<32-this.mask>>>0).toString(2).padStart(32,\"1\"),2);var networkAddress=((fullAddress&netmask)>>>0).toString(2).padStart(32,\"0\").match(/.{1,8}/g);var intNetWorkAddress=networkAddress.map(function(octet){return parseInt(octet,2);});return intNetWorkAddress.join(\".\");}},{key:\"firstUsableAddress\",value:function firstUsableAddress(){var reserved=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var fullAddress=this.getFullAddress();var netmask=parseInt((1<<32-this.mask>>>0).toString(2).padStart(32,\"1\"),2);var firstAddress=((fullAddress&netmask)+1+reserved>>>0).toString(2).padStart(32,\"0\").match(/.{1,8}/g);var intFirstAddress=firstAddress.map(function(octet){return parseInt(octet,2);});return intFirstAddress.join(\".\");}},{key:\"lastUsableAddress\",value:function lastUsableAddress(){var fullAddress=this.getFullAddress();var netmask=parseInt((1<<32-this.mask).toString(2).padStart(32,\"1\"),2);var broadcast=~(netmask>>>0);var lastAddress=(((fullAddress|broadcast)>>>0)-1).toString(2).padStart(32,\"0\").match(/.{1,8}/g);var intLastAddress=lastAddress.map(function(octet){return parseInt(octet,2);});return intLastAddress.join(\".\");}},{key:\"broadcastAddress\",value:function broadcastAddress(){var fullAddress=this.getFullAddress();var netmask=parseInt((1<<32-this.mask).toString(2).padStart(32,\"1\"),2);var broadcast=~(netmask>>>0);var broadcastAddress=((fullAddress|broadcast)>>>0).toString(2).padStart(32,\"0\").match(/.{1,8}/g);var intBroadcastAddress=broadcastAddress.map(function(octet){return parseInt(octet,2);});return intBroadcastAddress.join(\".\");}},{key:\"netmask\",value:function netmask(){var netmask=parseInt((1<<32-this.mask).toString(2).padStart(32,\"1\"),2);var netmaskOctets=netmask.toString(2).padStart(32,\"0\").match(/.{1,8}/g);var intNetmask=netmaskOctets.map(function(octet){return parseInt(octet,2);});return intNetmask.join(\".\");}},{key:\"count\",value:function count(){var count=parseInt((1<<32-this.mask).toString(2),2);return count;}},{key:\"availableCount\",value:function availableCount(){var reserved=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.reserved;return this.count()-reserved;}},{key:\"getClosestPowerOfTwo\",value:function getClosestPowerOfTwo(number){var strNumber=(+number).toString(2);var len=strNumber.length;var masking=parseInt(strNumber.substring(1),2)>>>0;if(masking>0){return 1<<len>>>0;}return number;}},{key:\"breakIntoSubnets\",value:function breakIntoSubnets(number){if(this.numberOfPossibleSubnets<number||number<=0){return[\"Can't break into \".concat(number,\" subnets\")];}var subnets=[];var closestNumber=+this.getClosestPowerOfTwo(number);//e.g. 8 - 1000\nvar len=(+closestNumber).toString(2).length-1;// to get the max number of elements for the next power of two.\nvar additionalMask=parseInt(\"1\".repeat(len),2)<<32-this.mask-len>>>0;// e.g. 111 if we have number be 8\nvar netmask=parseInt((1<<32-this.mask).toString(2).padStart(32,\"1\"),2);// the current netmask in binary\nvar newNetmask=this.mask+len;var maxNetmask=(netmask|additionalMask)>>>0;var currentSubnet=netmask;var currentOctets=this.address;while(currentSubnet<=maxNetmask){var currIpv4=new IPv4(currentOctets,newNetmask);subnets.push({networkAddress:currIpv4.networkAddress(),netmask:newNetmask,count:currIpv4.count()});currentSubnet+=currIpv4.count();var nextSubnet=parseInt(currIpv4.getOnlyBinnary(),2)+currIpv4.count();var strCurrentOctets=nextSubnet.toString(2).padStart(32,\"0\").match(/.{1,8}/g);currentOctets=strCurrentOctets.map(function(octet){return parseInt(octet,2);});}return subnets;}},{key:\"numberOfPossibleSubnets\",value:function numberOfPossibleSubnets(){return Math.pow(2,30-this.mask);}}]);return IPv4;}();export{IPv4};","map":{"version":3,"sources":["/Users/rschaves/terraform_aws_pipeline/src/lib/ipv4.js"],"names":["IPv4","address","mask","parseInt","fullAddress","reserved","octet","index","map","toString","padStart","join","getBinnary","replace","getFullAddress","netmask","networkAddress","match","intNetWorkAddress","firstAddress","intFirstAddress","broadcast","lastAddress","intLastAddress","broadcastAddress","intBroadcastAddress","netmaskOctets","intNetmask","count","number","strNumber","len","length","masking","substring","numberOfPossibleSubnets","subnets","closestNumber","getClosestPowerOfTwo","additionalMask","repeat","newNetmask","maxNetmask","currentSubnet","currentOctets","currIpv4","push","nextSubnet","getOnlyBinnary","strCurrentOctets"],"mappings":"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","sourcesContent":["class IPv4 {\n  constructor(address, mask) {\n    this.address = address;\n    this.mask = parseInt(mask);\n    this.fullAddress = \"\";\n    this.reserved = 2;\n  }\n\n  setReserved(reserved) {\n    this.reserved = reserved;\n  }\n\n  setSubnetMask(mask) {\n    this.mask = mask;\n    this.fullAddress = \"\";\n  }\n\n  setOctet(octet, index) {\n    this.address[index] = octet;\n    this.fullAddress = \"\";\n  }\n\n  getBinnary() {\n    return this.address\n      .map((octet, index) => {\n        return octet.toString(2).padStart(8, \"0\");\n      })\n      .join(\".\");\n  }\n\n  getOnlyBinnary() {\n    return this.address\n      .map((octet, index) => {\n        return octet.toString(2).padStart(8, \"0\");\n      })\n      .join(\"\");\n  }\n\n  getFullAddress() {\n    if (this.fullAddress !== \"\") {\n      return this.fullAddress;\n    }\n    this.fullAddress = parseInt(\n      this.getBinnary().replace(/\\./g, \"\").padStart(32, \"0\"),\n      2\n    );\n    return this.fullAddress;\n  }\n\n  networkAddress() {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      ((1 << (32 - this.mask)) >>> 0).toString(2).padStart(32, \"1\"),\n      2\n    );\n    const networkAddress = ((fullAddress & netmask) >>> 0)\n      .toString(2)\n      .padStart(32, \"0\")\n      .match(/.{1,8}/g);\n\n    const intNetWorkAddress = networkAddress.map((octet) => {\n      return parseInt(octet, 2);\n    });\n    return intNetWorkAddress.join(\".\");\n  }\n\n  firstUsableAddress(reserved = 0) {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      ((1 << (32 - this.mask)) >>> 0).toString(2).padStart(32, \"1\"),\n      2\n    );\n    const firstAddress = (((fullAddress & netmask) + 1 + reserved) >>> 0)\n      .toString(2)\n      .padStart(32, \"0\")\n      .match(/.{1,8}/g);\n\n    const intFirstAddress = firstAddress.map((octet) => {\n      return parseInt(octet, 2);\n    });\n    return intFirstAddress.join(\".\");\n  }\n\n  lastUsableAddress() {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, \"1\"),\n      2\n    );\n    const broadcast = ~(netmask >>> 0);\n    const lastAddress = (((fullAddress | broadcast) >>> 0) - 1)\n      .toString(2)\n      .padStart(32, \"0\")\n      .match(/.{1,8}/g);\n\n    const intLastAddress = lastAddress.map((octet) => {\n      return parseInt(octet, 2);\n    });\n    return intLastAddress.join(\".\");\n  }\n\n  broadcastAddress() {\n    const fullAddress = this.getFullAddress();\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, \"1\"),\n      2\n    );\n    const broadcast = ~(netmask >>> 0);\n    const broadcastAddress = ((fullAddress | broadcast) >>> 0)\n      .toString(2)\n      .padStart(32, \"0\")\n      .match(/.{1,8}/g);\n\n    const intBroadcastAddress = broadcastAddress.map((octet) => {\n      return parseInt(octet, 2);\n    });\n    return intBroadcastAddress.join(\".\");\n  }\n\n  netmask() {\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, \"1\"),\n      2\n    );\n    const netmaskOctets = netmask\n      .toString(2)\n      .padStart(32, \"0\")\n      .match(/.{1,8}/g);\n\n    const intNetmask = netmaskOctets.map((octet) => {\n      return parseInt(octet, 2);\n    });\n    return intNetmask.join(\".\");\n  }\n\n  count() {\n    const count = parseInt((1 << (32 - this.mask)).toString(2), 2);\n    return count;\n  }\n\n  availableCount(reserved = this.reserved) {\n    return this.count() - reserved;\n  }\n\n  getClosestPowerOfTwo(number) {\n    let strNumber = (+number).toString(2);\n    let len = strNumber.length;\n    let masking = parseInt(strNumber.substring(1), 2) >>> 0;\n    if (masking > 0) {\n      return (1 << len) >>> 0;\n    }\n    return number;\n  }\n\n  breakIntoSubnets(number) {\n    if (this.numberOfPossibleSubnets < number || number <= 0) {\n      return [`Can't break into ${number} subnets`];\n    }\n    let subnets = [];\n    let closestNumber = +this.getClosestPowerOfTwo(number); //e.g. 8 - 1000\n    let len = (+closestNumber).toString(2).length - 1; // to get the max number of elements for the next power of two.\n    let additionalMask =\n      (parseInt(\"1\".repeat(len), 2) << (32 - this.mask - len)) >>> 0; // e.g. 111 if we have number be 8\n    const netmask = parseInt(\n      (1 << (32 - this.mask)).toString(2).padStart(32, \"1\"),\n      2\n    ); // the current netmask in binary\n    const newNetmask = this.mask + len;\n    let maxNetmask = (netmask | additionalMask) >>> 0;\n    let currentSubnet = netmask;\n    let currentOctets = this.address;\n    while (currentSubnet <= maxNetmask) {\n      let currIpv4 = new IPv4(currentOctets, newNetmask);\n      subnets.push({\n        networkAddress: currIpv4.networkAddress(),\n        netmask: newNetmask,\n        count: currIpv4.count(),\n      });\n      currentSubnet += currIpv4.count();\n      const nextSubnet =\n        parseInt(currIpv4.getOnlyBinnary(), 2) + currIpv4.count();\n      const strCurrentOctets = nextSubnet\n        .toString(2)\n        .padStart(32, \"0\")\n        .match(/.{1,8}/g);\n      currentOctets = strCurrentOctets.map((octet) => {\n        return parseInt(octet, 2);\n      });\n    }\n    return subnets;\n  }\n\n  numberOfPossibleSubnets() {\n    return 2 ** (30 - this.mask);\n  }\n}\n\nexport { IPv4 };\n"]},"metadata":{},"sourceType":"module"}