{"ast":null,"code":"import _toConsumableArray from\"/Users/rschaves/terraform_aws_pipeline/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/rschaves/terraform_aws_pipeline/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import Octet from\"./Octet\";import Netmask from\"./Netmask\";import SubnetNumbersInput from\"./SubnetNumbersInput\";import React,{useState}from\"react\";import{IPv4}from\"./lib/ipv4\";import\"./IPv4Addr.css\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var IPv4Addr=function IPv4Addr(props){var _useState=useState(new IPv4([10,0,8,0],21)),_useState2=_slicedToArray(_useState,2),ipv4=_useState2[0],setIpv4=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),validAddress=_useState4[0],setValidAddress=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),showSubnetting=_useState6[0],setShowSubnetting=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),subnetsNumber=_useState8[0],setSubnetsNumber=_useState8[1];var setOctet=function setOctet(octet,index,change){var updatedAddress=_toConsumableArray(ipv4.address);if(change){updatedAddress[index]=+octet;setIpv4(new IPv4(updatedAddress,ipv4.mask));}};var setNetmask=function setNetmask(netmask,change){if(change){setIpv4(new IPv4(ipv4.address,netmask));}};var setNumberOfSubnets=function setNumberOfSubnets(subnetsNumber,change){if(change){setSubnetsNumber(subnetsNumber);}};var displayNetmasks=function displayNetmasks(netmasks){var netmasksElements=[];netmasks.forEach(function(e,index){netmasksElements.push(/*#__PURE__*/_jsxs(\"div\",{children:[e.networkAddress,\"/\",e.netmask,\" (\",e.count,\" hosts)\"]},\"networkAddress-\".concat(index)));});return netmasksElements;};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"address-container\",children:[ipv4.address.map(function(octet,index){return/*#__PURE__*/_jsxs(\"div\",{className:\"octet-container\",children:[/*#__PURE__*/_jsx(Octet,{value:octet,index:index,setValid:setValidAddress,changeFunction:setOctet}),index<3?/*#__PURE__*/_jsx(\"span\",{children:\".\"}):/*#__PURE__*/_jsx(\"span\",{className:\"slash\",children:\"/\"})]},\"oct-container-\".concat(index));}),\" \",/*#__PURE__*/_jsx(Netmask,{value:ipv4.mask,setValid:setValidAddress,changeFunction:setNetmask})]}),validAddress?/*#__PURE__*/_jsxs(\"div\",{className:\"results\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Binary:\"}),/*#__PURE__*/_jsx(\"span\",{children:ipv4.getBinnary()})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Network Address:\"}),/*#__PURE__*/_jsx(\"span\",{children:ipv4.networkAddress()})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"First usable address:\"}),/*#__PURE__*/_jsx(\"span\",{children:ipv4.firstUsableAddress()})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"First usable address(AWS):\"}),/*#__PURE__*/_jsx(\"span\",{children:ipv4.firstUsableAddress(3)}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{children:\"AWS reserves first four addresses for: Network, Router, DNS, Future use\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Last usable address:\"}),/*#__PURE__*/_jsx(\"span\",{children:ipv4.lastUsableAddress()})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Broadcast Address:\"}),/*#__PURE__*/_jsx(\"span\",{children:ipv4.broadcastAddress()})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Netmask:\"}),/*#__PURE__*/_jsx(\"span\",{children:ipv4.netmask()})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Count:\"}),/*#__PURE__*/_jsx(\"span\",{children:ipv4.count()})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Usable addresses:\"}),/*#__PURE__*/_jsx(\"span\",{children:ipv4.availableCount()})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Usable addresses(AWS):\"}),/*#__PURE__*/_jsx(\"span\",{children:ipv4.availableCount(5)})]})]}):\"\",/*#__PURE__*/_jsxs(\"div\",{className:\"subnets\",children:[\"Break into subnets:\",/*#__PURE__*/_jsx(\"input\",{name:\"showSubnetting\",type:\"checkbox\",checked:showSubnetting,onChange:function onChange(e){setShowSubnetting(e.target.checked);}}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),showSubnetting?/*#__PURE__*/_jsxs(\"div\",{id:\"details\",children:[\"max number of subnets: \",ipv4.numberOfPossibleSubnets(),\" with a minimum of 4 addreses (minus Network, broadcast, 2 available addresses) closest: \",ipv4.getClosestPowerOfTwo(subnetsNumber),/*#__PURE__*/_jsxs(\"div\",{id:\"subnet-input-container\",children:[/*#__PURE__*/_jsx(SubnetNumbersInput,{value:subnetsNumber,onChange:setNumberOfSubnets,maxNumberOfSubnets:ipv4.numberOfPossibleSubnets()}),displayNetmasks(ipv4.breakIntoSubnets(subnetsNumber))]})]}):\"\"]})]});};export default IPv4Addr;","map":{"version":3,"sources":["/Users/rschaves/terraform_aws_pipeline/src/IPv4Addr.js"],"names":["Octet","Netmask","SubnetNumbersInput","React","useState","IPv4","IPv4Addr","props","ipv4","setIpv4","validAddress","setValidAddress","showSubnetting","setShowSubnetting","subnetsNumber","setSubnetsNumber","setOctet","octet","index","change","updatedAddress","address","mask","setNetmask","netmask","setNumberOfSubnets","displayNetmasks","netmasks","netmasksElements","forEach","e","push","networkAddress","count","map","getBinnary","firstUsableAddress","lastUsableAddress","broadcastAddress","availableCount","target","checked","numberOfPossibleSubnets","getClosestPowerOfTwo","breakIntoSubnets"],"mappings":"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","sourcesContent":["import Octet from \"./Octet\";\nimport Netmask from \"./Netmask\";\nimport SubnetNumbersInput from \"./SubnetNumbersInput\";\nimport React, { useState } from \"react\";\nimport { IPv4 } from \"./lib/ipv4\";\nimport \"./IPv4Addr.css\";\n\nconst IPv4Addr = (props) => {\n  const [ipv4, setIpv4] = useState(new IPv4([10, 0, 8, 0], 21));\n  const [validAddress, setValidAddress] = useState(true);\n  const [showSubnetting, setShowSubnetting] = useState(true);\n  const [subnetsNumber, setSubnetsNumber] = useState(0);\n\n  const setOctet = (octet, index, change) => {\n    let updatedAddress = [...ipv4.address];\n    if (change) {\n      updatedAddress[index] = +octet;\n      setIpv4(new IPv4(updatedAddress, ipv4.mask));\n    }\n  };\n\n  const setNetmask = (netmask, change) => {\n    if (change) {\n      setIpv4(new IPv4(ipv4.address, netmask));\n    }\n  };\n\n  const setNumberOfSubnets = (subnetsNumber, change) => {\n    if (change) {\n      setSubnetsNumber(subnetsNumber);\n    }\n  };\n\n  const displayNetmasks = (netmasks) => {\n    let netmasksElements = [];\n    netmasks.forEach((e, index) => {\n      netmasksElements.push(\n        <div key={`networkAddress-${index}`}>\n          {e.networkAddress}/{e.netmask} ({e.count} hosts)\n        </div>\n      );\n    });\n    return netmasksElements;\n  };\n\n  return (\n    <div>\n      <div className=\"address-container\">\n        {ipv4.address.map((octet, index) => {\n          return (\n            <div className=\"octet-container\" key={`oct-container-${index}`}>\n              <Octet\n                value={octet}\n                index={index}\n                setValid={setValidAddress}\n                changeFunction={setOctet}\n              />\n              {index < 3 ? <span>.</span> : <span className=\"slash\">/</span>}\n            </div>\n          );\n        })}{\" \"}\n        <Netmask\n          value={ipv4.mask}\n          setValid={setValidAddress}\n          changeFunction={setNetmask}\n        />\n      </div>\n\n      {validAddress ? (\n        <div className=\"results\">\n          <div>\n            <strong>Binary:</strong>\n            <span>{ipv4.getBinnary()}</span>\n          </div>\n          <div>\n            <strong>Network Address:</strong>\n            <span>{ipv4.networkAddress()}</span>\n          </div>\n          <div>\n            <strong>First usable address:</strong>\n            <span>{ipv4.firstUsableAddress()}</span>\n          </div>\n          <div>\n            <strong>First usable address(AWS):</strong>\n            <span>{ipv4.firstUsableAddress(3)}</span>\n            <br />\n            <span>\n              AWS reserves first four addresses for: Network, Router, DNS,\n              Future use\n            </span>\n          </div>\n          <div>\n            <strong>Last usable address:</strong>\n            <span>{ipv4.lastUsableAddress()}</span>\n          </div>\n          <div>\n            <strong>Broadcast Address:</strong>\n            <span>{ipv4.broadcastAddress()}</span>\n          </div>\n          <div>\n            <strong>Netmask:</strong>\n            <span>{ipv4.netmask()}</span>\n          </div>\n          <div>\n            <strong>Count:</strong>\n            <span>{ipv4.count()}</span>\n          </div>\n          <div>\n            <strong>Usable addresses:</strong>\n            <span>{ipv4.availableCount()}</span>\n          </div>\n          <div>\n            <strong>Usable addresses(AWS):</strong>\n            <span>{ipv4.availableCount(5)}</span>\n          </div>\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div className=\"subnets\">\n        Break into subnets:\n        <input\n          name=\"showSubnetting\"\n          type=\"checkbox\"\n          checked={showSubnetting}\n          onChange={(e) => {\n            setShowSubnetting(e.target.checked);\n          }}\n        />\n        <br />\n        <br />\n        {showSubnetting ? (\n          <div id=\"details\">\n            max number of subnets: {ipv4.numberOfPossibleSubnets()} with a\n            minimum of 4 addreses (minus Network, broadcast, 2 available\n            addresses) closest: {ipv4.getClosestPowerOfTwo(subnetsNumber)}\n            <div id=\"subnet-input-container\">\n              <SubnetNumbersInput\n                value={subnetsNumber}\n                onChange={setNumberOfSubnets}\n                maxNumberOfSubnets={ipv4.numberOfPossibleSubnets()}\n              />\n              {displayNetmasks(ipv4.breakIntoSubnets(subnetsNumber))}\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default IPv4Addr;\n"]},"metadata":{},"sourceType":"module"}